@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="editor-container" style="font-family: Calibri, sans-serif; font-size: 11pt;">
    <div class="toolbar" style="background-color: #f5f5f5; padding: 5px; border-bottom: 1px solid #ccc;">
        <button type="button" @onclick:preventDefault="true" @onclick="FormatTextBold" title="Bold" class="toolbar-button">B</button>
        <button type="button" @onclick:preventDefault="true" @onclick="FormatTextItalic" title="Italic" class="toolbar-button">I</button>
        <button type="button" @onclick:preventDefault="true" @onclick="FormatTextUnderline" title="Underline" class="toolbar-button">U</button>
        <button type="button" @onclick:preventDefault="true" @onclick="FormatTextStrikethrough" title="Strikethrough" class="toolbar-button">S</button>
        <select @onchange="FormatBlock" title="Format" class="toolbar-select">
            <option value="p">Normal</option>
            <option value="h1">Heading 1</option>
            <option value="h2">Heading 2</option>
            <option value="h3">Heading 3</option>
        </select>
        <select @onchange="ChangeFontSize" title="Font Size" class="toolbar-select">
            <option value="8pt">8pt</option>
            <option value="9pt">9pt</option>
            <option value="10pt">10pt</option>
            <option value="11pt" selected>11pt</option>
            <option value="12pt">12pt</option>
            <option value="14pt">14pt</option>
            <option value="18pt">18pt</option>
            <option value="24pt">24pt</option>
            <option value="36pt">36pt</option>
        </select>
        @* <InputFile accept="image/*" OnChange="@HandleImageUpload" title="Upload Image" class="toolbar-button" style="margin-left: 5px;" /> *@
    </div>
    <div class="editor"
         @ref="editorRef"
         contenteditable="true"
         style="border: 1px solid #ccc; min-height: @Height; padding: 10px; background-color: white; color: black; font-family: Calibri, sans-serif; font-size: 11pt; width: 100%;">
    </div>
</div>

@code {
    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public string EntityId { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public string FieldName { get; set; } = "default";

    [Parameter]
    public string Height { get; set; } = "400px";

    private ElementReference editorRef;
    private bool isUpdatingContent = false;
    private DotNetObjectReference<BlazorRichTextEditor> dotNetRef;
    private HttpClient _httpClient;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("EffortlessQAApi");
        await InitializeDotNetRef();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string initialContent = Value;
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeEditor", editorRef, initialContent, dotNetRef);
            }
            catch (JSException ex)
            {
                Console.WriteLine($"Error initializing editor content: {ex.Message}");
            }
        }
    }

    private async Task InitializeDotNetRef()
    {
        dotNetRef?.Dispose();
        dotNetRef = DotNetObjectReference.Create(this);
    }

    private async Task FormatTextBold()
    {
        await ExecuteCommand("bold");
    }

    private async Task FormatTextItalic()
    {
        await ExecuteCommand("italic");
    }

    private async Task FormatTextUnderline()
    {
        await ExecuteCommand("underline");
    }

    private async Task FormatTextStrikethrough()
    {
        await ExecuteCommand("strikethrough");
    }

    private async Task FormatBlock(ChangeEventArgs e)
    {
        var format = e.Value?.ToString();
        if (!string.IsNullOrEmpty(format))
        {
            await ExecuteCommand("formatBlock", false, format);
        }
    }

    private async Task ChangeFontSize(ChangeEventArgs e)
    {
        var size = e.Value?.ToString();
        if (!string.IsNullOrEmpty(size))
        {
            await ExecuteCommand("fontSize", false, size);
        }
    }

    private async Task ExecuteCommand(string command, bool showUI = false, string? value = null)
    {
        try
        {
            await SaveCursorPosition();
            await JSRuntime.InvokeVoidAsync("execCommand", command, showUI, value);
            await RestoreCursorPosition();
            await UpdateContent();
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Error executing command {command}: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task HandlePasteImage(byte[] blob, string fileType, string fileName)
    {
        try
        {
            if (fileType.StartsWith("image/"))
            {
                var formData = new MultipartFormDataContent();
                formData.Add(new ByteArrayContent(blob), "file", fileName);
                var response = await _httpClient.PostAsync($"common/images/upload?entityId={Uri.EscapeDataString(EntityId)}&fieldName={Uri.EscapeDataString(FieldName)}", formData);
                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    return;
                }
                var json = await response.Content.ReadAsStringAsync();
                var result = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(json);
                if (result != null && result.TryGetValue("location", out var location) && !string.IsNullOrEmpty(location))
                {
                    Console.WriteLine($"Image uploaded successfully: {location}");
                    await JSRuntime.InvokeVoidAsync("focusEditor", editorRef);
                    await JSRuntime.InvokeVoidAsync("insertImage", editorRef, $"<img src='{location}' style='max-width: 100%; height: auto;' alt='Dropped or pasted image' />");
                    await RestoreCursorPosition();
                    await UpdateContent();
                }
                else
                {
                    Console.WriteLine($"Invalid JSON response or missing 'location': {json}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling dropped or pasted image: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task UpdateValue(string newContent)
    {
        try
        {
            if (!isUpdatingContent)
            {
                isUpdatingContent = true;
                if (!string.IsNullOrWhiteSpace(newContent) && !newContent.StartsWith("<"))
                {
                    newContent = $"<p>{newContent}</p>";
                }
                if (newContent != Value)
                {
                    Value = newContent;
                    await ValueChanged.InvokeAsync(Value);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating content: {ex.Message}");
        }
        finally
        {
            isUpdatingContent = false;
        }
    }

    private async Task UpdateContent()
    {
        try
        {
            isUpdatingContent = true;
            var newContent = await JSRuntime.InvokeAsync<string>("getEditorContent", editorRef);
            Console.WriteLine($"Editor content after update: {newContent}");
            if (!string.IsNullOrWhiteSpace(newContent) && !newContent.StartsWith("<"))
            {
                newContent = $"<p>{newContent}</p>";
            }
            if (newContent != Value)
            {
                Value = newContent;
                await ValueChanged.InvokeAsync(Value);
            }
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Error updating content: {ex.Message}");
        }
        finally
        {
            isUpdatingContent = false;
        }
    }

    private async Task SaveCursorPosition()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("saveCursorPosition", editorRef);
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Error saving cursor position: {ex.Message}");
        }
    }

    private async Task RestoreCursorPosition()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("restoreCursorPosition", editorRef);
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Error restoring cursor position: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task ShowError(string message)
    {
        await JSRuntime.InvokeVoidAsync("showEditorError", editorRef, message);
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("destroyEditor", editorRef);
            if (dotNetRef != null)
            {
                dotNetRef.Dispose();
                dotNetRef = null;
            }
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Error disposing editor: {ex.Message}");
        }
    }
}