@inherits LayoutComponentBase
@using EffortlessQA.Client.Services
@using EffortlessQA.Data.Dtos
@using MudBlazor
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject ApplicationContextService ApplicationContextService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudThemeProvider Theme="@_theme" IsDarkMode="@_isDarkMode" />

<MudPopoverProvider />
<MudSnackbarProvider />

<MudLayout>
    <!-- Top Bar -->
    <MudAppBar Elevation="2" Dense="true"/>
        <!-- Hamburger Menu for Sidebar -->
    <MudAppBar Elevation="0" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        
        <MudText Typo="Typo.h6" Class="ml-3">EffortlessQA</MudText>
        
        <!-- Global Search -->
        <!-- Project Selector -->
        @if (IsAuthenticated)
        {
            @if (_isLoadingProjects)
            {
                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Class="ml-3" />
            }
            else if (_projectsError)
            {
                <MudText Typo="Typo.body2" Color="Color.Error" Class="ml-3">Failed to load projects</MudText>
            }
            else if (!_projects.Any())
            {
                <MudText Typo="Typo.body2" Color="Color.Warning" Class="ml-3">No projects available</MudText>
            }
            else
            {
               <MudSelect T="Guid?"
        Label="Select Project"
        Value="@SelectedProjectId"
        ValueChanged="@OnProjectChanged"
        Dense="true"
        Style="width: 250px;"
        ToStringFunc="@(id => _projects.FirstOrDefault(p => p.Id == id)?.Name ?? "No Project")">
    </MudSelect>

            }
        }
        
        <MudSpacer />
        <GlobalSearch />
        
        @if (IsAuthenticated && IsAdmin)
        {
            <MudSelect T="string" Label="Tenant" Value="@SelectedTenant" ValueChanged="@OnTenantChangedAsync" Class="mr-3" Dense="true" Variant="Variant.Outlined">
                @foreach (var tenant in Tenants)
                {
                    <MudSelectItem Value="@tenant">@tenant</MudSelectItem>
                }
            </MudSelect>
        }
        
        @if (IsAuthenticated)
        {
            <MudMenu Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Direction="Direction.Right" Dense="true">
                <MudMenuItem OnClick="@ViewProfile">Profile</MudMenuItem>
                <MudMenuItem OnClick="@LogoutAsync">Logout</MudMenuItem>
            </MudMenu>
        }
    </MudAppBar>

    <!-- Sidebar -->
    <MudDrawer @bind-Open="@_drawerOpen" Elevation="2" ClipMode="DrawerClipMode.Docked" Width="200px" Breakpoint="Breakpoint.Md">
        <MudNavMenu>
            @if (IsAuthenticated)
            {
                <MudNavLink Href="/dashboard" Icon="@Icons.Material.Filled.Dashboard" Match="NavLinkMatch.Prefix">Dashboard</MudNavLink>
                <MudNavLink Href="/projects" Icon="@Icons.Material.Filled.Work" Match="NavLinkMatch.Prefix">Projects</MudNavLink>
                <MudNavLink Href="/requirements" Icon="@Icons.Material.Filled.List" Match="NavLinkMatch.Prefix">Requirements</MudNavLink>
                <MudNavLink Href="/test-suites" Icon="@Icons.Material.Filled.Folder" Match="NavLinkMatch.Prefix">Test Suites</MudNavLink>
                <MudNavLink Href="/test-cases" Icon="@Icons.Material.Filled.Description" Match="NavLinkMatch.Prefix">Test Cases</MudNavLink>
                <MudNavLink Href="/test-runs" Icon="@Icons.Material.Filled.PlayArrow" Match="NavLinkMatch.Prefix">Test Runs</MudNavLink>
                <MudNavLink Href="/defects" Icon="@Icons.Material.Filled.BugReport" Match="NavLinkMatch.Prefix">Defects</MudNavLink>
                <MudNavLink Href="/reports" Icon="@Icons.Material.Filled.BarChart" Match="NavLinkMatch.Prefix">Reports</MudNavLink>
                <MudNavLink Href="/search" Icon="@Icons.Material.Filled.Search" Match="NavLinkMatch.Prefix">Search</MudNavLink>
                @if (IsAdmin)
                {
                    <MudNavGroup Title="Settings" Icon="@Icons.Material.Filled.Settings" Expanded="false">
                        <MudNavLink Href="/tenant" Icon="@Icons.Material.Filled.Business" Match="NavLinkMatch.Prefix">Tenant</MudNavLink>
                        <MudNavLink Href="/permissions" Icon="@Icons.Material.Filled.Security" Match="NavLinkMatch.Prefix">Permissions</MudNavLink>
                        <MudNavLink Href="/users" Icon="@Icons.Material.Filled.People" Match="NavLinkMatch.Prefix">Users</MudNavLink>
                    </MudNavGroup>
                }
            }
            else
            {
                <MudNavLink Href="/login" Icon="@Icons.Material.Filled.Login" Match="NavLinkMatch.Prefix">Login</MudNavLink>
                <MudNavLink Href="/register" Icon="@Icons.Material.Filled.AppRegistration" Match="NavLinkMatch.Prefix">Register</MudNavLink>
                <MudNavLink Href="/password-reset" Icon="@Icons.Material.Filled.Lock" Match="NavLinkMatch.Prefix">Reset Password</MudNavLink>
            }
        </MudNavMenu>
    </MudDrawer>

    <!-- Main Content -->
    <MudMainContent Class="pt-2">
        <MudContainer MaxWidth="MaxWidth.Large" Class="mb-2">
            <Breadcrumb />
        </MudContainer>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-2">
            <MudPaper Elevation="1" Class="pa-4">
                @Body
            </MudPaper>
        </MudContainer>
    </MudMainContent>

    <!-- Footer -->
    <MudPaper Elevation="1" Class="pa-2 mt-4">
        <MudText Typo="Typo.caption" Align="Align.Center">
            EffortlessQA v1.0.0 | <MudLink Href="https://api.effortlessqa.com/docs" Target="_blank">API Docs</MudLink>
        </MudText>
    </MudPaper>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool IsAuthenticated => AuthService.IsAuthenticated;
    private bool IsAdmin => AuthService.IsAdmin;
    private string SelectedTenant { get; set; } = "Default Tenant";
    private List<string> Tenants { get; set; } = new() { "Default Tenant", "Org A", "Org B" };
    private List<ProjectDto> _projects = new();
    private bool _isLoadingProjects = true;
    private bool _projectsError;
    private bool _isDarkMode = false;
    private readonly MudTheme _theme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = "#1976D2",
            Secondary = "#FF4081",
            Background = "#F5F7FA",
            Surface = "#FFFFFF",
            TextPrimary = "#212121",
            TextSecondary = "#757575",
            AppbarBackground = "#1976D2",
            AppbarText = "#FFFFFF"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#2196F3",
            Secondary = "#F50057",
            Background = "#121212",
            Surface = "#1E1E1E",
            TextPrimary = "#FFFFFF",
            TextSecondary = "#B0BEC5",
            AppbarBackground = "#2196F3",
            AppbarText = "#FFFFFF"
        },
        Typography = new Typography
        {
                Default = new DefaultTypography()
            {
                FontFamily = new[] { "Roboto", "Helvetica", "Arial", "sans-serif" },
                FontSize = ".875rem",
                FontWeight = "400",
                LineHeight = "1.43",
                LetterSpacing = ".01071em"
            },
                H6 = new DefaultTypography()
            {
                FontSize = "1.25rem",
                FontWeight = "500",
                LineHeight = "1.6",
                LetterSpacing = ".0075em"
            }
        },
    
    LayoutProperties = new LayoutProperties
        {
            DefaultBorderRadius = "4px"
        }
    };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("console.log", "MudBlazor initialized");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoadingProjects = true;
            await ApplicationContextService.InitializeAsync();
            _projects = await ApplicationContextService.GetProjectsAsync();
            Console.WriteLine($"Loaded {_projects.Count} projects: {System.Text.Json.JsonSerializer.Serialize(_projects)}");
            ApplicationContextService.OnProjectChanged += async () =>
            {
                _projects = await ApplicationContextService.GetProjectsAsync();
                Console.WriteLine($"Projects updated: {_projects.Count}");
                await InvokeAsync(StateHasChanged);
            };
        }
        catch (Exception ex)
        {
            _projectsError = true;
            Snackbar.Add($"Failed to load projects: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error loading projects: {ex}");
        }
        finally
        {
            _isLoadingProjects = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;

    private async Task LogoutAsync()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login");
    }

    private void ViewProfile()
    {
        NavigationManager.NavigateTo("/profile");
    }

    private async Task OnTenantChangedAsync(string tenant)
    {
        SelectedTenant = tenant;
        await Task.CompletedTask;
    }
    private Guid? SelectedProjectId { get; set; }

    private async Task OnProjectChanged(Guid? newProjectId)
    {
        SelectedProjectId = newProjectId;
        ApplicationContextService.SelectedProjectId = newProjectId;
        var projectName = newProjectId.HasValue ?
            _projects.FirstOrDefault(p => p.Id == newProjectId.Value)?.Name ?? "No Project" : "No Project";
        Snackbar.Add($"Switched to project: {projectName}", Severity.Info);
        await InvokeAsync(StateHasChanged);
    }
    private async Task OnProjectChangedAsync(Guid? projectId)
    {
        ApplicationContextService.SelectedProjectId = projectId;
        var projectName = projectId.HasValue ? _projects.FirstOrDefault(p => p.Id == projectId.Value)?.Name ?? "No Project" : "No Project";
        Snackbar.Add($"Switched to project: {projectName}", Severity.Info);
        await InvokeAsync(StateHasChanged);
    }
}