@inject IJSRuntime JS
@implements IAsyncDisposable

<div>
    <textarea id="@_editorId">@_value</textarea>
</div>

@code {
    [Parameter] public string Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    private string _editorId = $"editor_{Guid.NewGuid().ToString("N")}";
    private DotNetObjectReference<TinyMceEditor> _objRef;
    private string _value;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _value = Value;
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("tinyMCEBlazor.initEditor", _editorId, _objRef);
        }
    }

    [JSInvokable]
    public async Task OnEditorChange(string content)
    {
        _value = content;
        await ValueChanged.InvokeAsync(content);
    }

    public async ValueTask DisposeAsync()
    {
        _objRef?.Dispose();
    }
}
