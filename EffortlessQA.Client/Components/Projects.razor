@page "/projects"
@using EffortlessQA.Client.Components.dialogs
@using EffortlessQA.Client.Models
@using EffortlessQA.Client.Services
@using EffortlessQA.Data.Dtos
@using MudBlazor
@using System.Net.Http.Json
@inject ProjectService ProjectService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<MudThemeProvider Theme="_customTheme" />
<MudContainer MaxWidth="MaxWidth.Large" Class="my-8">
    <MudGrid Spacing="4">
        <!-- Header -->
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Manage Projects</MudText>
        </MudItem>

        <!-- Toolbar -->
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-6" Style="border-radius: 8px;">
                <MudGrid Spacing="3">
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField T="string"
                                      Label="Search Projects"
                                      Placeholder="Enter project name..."
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      @bind-Value="_searchTerm"
                                      DebounceInterval="500"
                                      OnDebounceIntervalElapsed="SearchProjects"
                                      Variant="Variant.Outlined"
                                      Clearable="true"
                                      Class="mud-input-rounded" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect T="string"
                                   Label="Filter by Status"
                                   @bind-Value="_filterStatus"
                                   Variant="Variant.Outlined"
                                   Class="mud-input-rounded">
                            <MudSelectItem Value="@("")">All</MudSelectItem>
                            <MudSelectItem Value="@("Active")">Active</MudSelectItem>
                            <MudSelectItem Value="@("Inactive")">Inactive</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4" Class="d-flex align-center justify-end gap-3">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="@OpenCreateDialog"
                                   Size="Size.Medium"
                                   Class="mud-button-prominent">Add Project</MudButton>
                        <MudTooltip Text="Refresh projects">
                            <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                           Color="Color.Secondary"
                                           OnClick="@RefreshProjects" />
                        </MudTooltip>
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Dense="true" AnchorOrigin="Origin.BottomRight">
                            <MudMenuItem OnClick="@ExportToCsv">
                                <MudIcon Icon="@Icons.Material.Filled.Download" Class="mr-2" /> Export CSV
                            </MudMenuItem>
                            <MudMenuItem OnClick="@ImportFromCsv">
                                <MudIcon Icon="@Icons.Material.Filled.Upload" Class="mr-2" /> Import CSV
                            </MudMenuItem>
                        </MudMenu>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <!-- Table -->
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-6" Style="border-radius: 8px;">
                <MudTable ServerData="@(new Func<TableState, CancellationToken, Task<TableData<ProjectDto>>>(ServerReload))"
                          @ref="_table"
                          Hover="true"
                          Breakpoint="Breakpoint.Sm"
                          Loading="@_isLoading"
                          Dense="true"
                          AllowMultiSelection="true"
                          @bind-SelectedItems="_selectedProjects"
                          Class="mud-table-clean">
                    <ToolBarContent>
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">Projects</MudText>
                        <MudSpacer />
                        @if (_selectedProjects.Any())
                        {
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="@BulkDeleteProjects"
                                       Size="Size.Small">Delete (@_selectedProjects.Count)</MudButton>
                        }
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortLabel="name" T="ProjectDto" InitialDirection="SortDirection.Ascending">Name</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortLabel="description" T="ProjectDto">Description</MudTableSortLabel>
                        </MudTh>
                        <MudTh Style="width: 100px; text-align: center;">Status</MudTh>
                        <MudTh Style="width: 100px; text-align: center;">Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            @if (context.IsEditing)
                            {
                                <MudTextField T="string"
                                              @bind-Value="context.Name"
                                              Required="true"
                                              RequiredError="Name is required"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Class="mud-input-compact" />
                            }
                            else
                            {
                                @context.Name
                            }
                        </MudTd>
                        <MudTd>
                            @if (context.IsEditing)
                            {
                                <MudTextField T="string"
                                              @bind-Value="context.Description"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Lines="2"
                                              Class="mud-input-compact" />
                            }
                            else
                            {
                                @context.Description
                            }
                        </MudTd>
                       
                        <MudTd Style="text-align: center;">
                            @if (context.IsEditing)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Save"
                                               Color="Color.Success"
                                               Size="Size.Small"
                                               OnClick="@(() => SaveInlineEdit(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                                               Color="Color.Secondary"
                                               Size="Size.Small"
                                               OnClick="@(() => CancelInlineEdit(context))" />
                            }
                            else
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Size="Size.Small"
                                               OnClick="@(() => StartInlineEdit(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => DeleteProject(context.Id))" />
                            }
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager RowsPerPageString="Rows per page" PageSizeOptions="@(new int[] { 5, 10, 25 })" />
                    </PagerContent>
                    <LoadingContent>
                        <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="my-4" />
                    </LoadingContent>
                    <NoRecordsContent>
                        <MudPaper Elevation="0" Class="pa-8 d-flex flex-column align-center justify-center" Style="min-height: 400px; background: transparent;">
                            <MudIcon Icon="@Icons.Material.Filled.FolderOpen" Size="Size.Large" Color="Color.Primary" Class="mb-4" />
                            <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center">No Projects Found</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center" Class="mb-6 mt-3">
                                Click "Add Project" above to create your first project.
                            </MudText>
                        </MudPaper>
                    </NoRecordsContent>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudDialog @bind-Visible="_showCreateDialog" Options="new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true }">
    <DialogContent>
        <MudGrid Class="pa-4">
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">Create New Project</MudText>
                <MudForm @ref="_form" @bind-IsValid="_formIsValid" Class="d-flex flex-column gap-4">
                    <MudTextField T="string"
                                  Label="Project Name"
                                  @bind-Value="_newProject.Name"
                                  Required="true"
                                  RequiredError="Name is required"
                                  Validation="@(new Func<string, string>(ValidateName))"
                                  Variant="Variant.Outlined"
                                  Clearable="true"
                                  HelperText="Enter a unique project name (min 3 characters)"
                                  Class="mud-input-rounded" />
                    <MudTextField T="string"
                                  Label="Description"
                                  @bind-Value="_newProject.Description"
                                  Lines="4"
                                  Variant="Variant.Outlined"
                                  Clearable="true"
                                  HelperText="Describe the project briefly"
                                  Class="mud-input-rounded" />                   
                    
                </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@CancelCreate" Variant="Variant.Text" Color="Color.Secondary">Cancel</MudButton>
        <MudButton OnClick="@CreateProject" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_formIsValid">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<ProjectDto> _projects = new();
    private CreateProjectDto _newProject = new();
    private bool _showCreateDialog;
    private string _searchTerm = string.Empty;
    private string _filterStatus = string.Empty;
    private bool _isLoading;
    private MudTable<ProjectDto> _table;
    private HashSet<ProjectDto> _selectedProjects = new();
    private MudForm _form;
    private bool _formIsValid;
    private string _userIds = string.Empty;
    private Dictionary<Guid, ProjectDto> _originalProjects = new();
    private bool _autoRefreshEnabled;
    private CancellationTokenSource _autoRefreshCts = new();

    private readonly MudTheme _customTheme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = "#1976D2",
            Secondary = "#FF4081",
            Background = "#F5F7FA",
            Surface = "#FFFFFF",
            TextPrimary = "#212121",
            TextSecondary = "#757575",
            AppbarBackground = "#1976D2",
            ActionDefault = "#212121"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#2196F3",
            Secondary = "#F50057",
            Background = "#121212",
            Surface = "#1E1E1E",
            TextPrimary = "#FFFFFF",
            TextSecondary = "#B0BEC5",
            AppbarBackground = "#2196F3",
            ActionDefault = "#FFFFFF"
        },
        Typography = new Typography
        {
            // Default = new Default
            // {
            //     FontFamily = new[] { "Roboto", "Helvetica", "Arial", "sans-serif" },
            //     FontSize = ".875rem",
            //     FontWeight = 400,
            //     LineHeight = 1.43,
            //     LetterSpacing = ".01071em"
            // },
            // H6 = new H6
            // {
            //     FontSize = "1.25rem",
            //     FontWeight = 500,
            //     LineHeight = 1.6,
            //     LetterSpacing = ".0075em"
            // }
        },
        LayoutProperties = new LayoutProperties
        {
            DefaultBorderRadius = "8px"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        //await LoadProjects();
        //StartAutoRefresh();
    }

    // protected override void Dispose(bool disposing)
    // {
    //     if (disposing)
    //     {
    //         _autoRefreshCts.Cancel();
    //         _autoRefreshCts.Dispose();
    //     }
    //     base.Dispose(disposing);
    // }

    private async Task LoadProjects()
    {
        _isLoading = true;
        try
        {
            _projects = await ProjectService.GetProjectsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load projects: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<TableData<ProjectDto>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        _isLoading = true;
        try
        {
            
            _projects = await ProjectService.GetProjectsAsync();

            // var query = new ProjectQuery
            // {
            //     SearchTerm = _searchTerm,
            //     Status = _filterStatus,
            //     SortBy = state.SortLabel,
            //     SortDirection = state.SortDirection == SortDirection.Ascending ? "asc" : "desc",
            //     Page = state.Page + 1,
            //     PageSize = state.PageSize
            // };

            //var result = await ProjectService.GetPagedProjectsAsync(query);
            //return new TableData<ProjectDto> { TotalItems = result.Data.TotalCount, Items = result.Data.Items };
            return new TableData<ProjectDto> { TotalItems = 7, Items = _projects };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load projects: {ex.Message}", Severity.Error);
            return new TableData<ProjectDto> { TotalItems = 0, Items = new List<ProjectDto>() };
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void OpenCreateDialog()
    {
        _newProject = new() { Status = "Active" };
        _userIds = string.Empty;
        _showCreateDialog = true;
        _form?.ResetValidation();
    }

    private void CancelCreate()
    {
        _showCreateDialog = false;
        _newProject = new();
        _userIds = string.Empty;
        _form?.ResetValidation();
    }

    private async Task CreateProject()
    {
        if (!_formIsValid) return;

        try
        {
            // _newProject.UserIds = string.IsNullOrWhiteSpace(_userIds)
            //     ? new List<int>()
            //     : _userIds.Split(',').Select(x => int.Parse(x.Trim())).ToList();
            await ProjectService.CreateProjectAsync(_newProject);
            await _table.ReloadServerData();
            _showCreateDialog = false;
            _newProject = new();
            _userIds = string.Empty;
            _form?.ResetValidation();
            Snackbar.Add("Project created successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create project: {ex.Message}", Severity.Error);
        }
    }

    private void StartInlineEdit(ProjectDto project)
    {
        project.IsEditing = true;
        _originalProjects[project.Id] = new ProjectDto
        {
            Id = project.Id,
            Name = project.Name,
            Description = project.Description,
            //Status = project.Status,
            TenantId = project.TenantId
        };
    }

    private async Task SaveInlineEdit(ProjectDto project)
    {
        try
        {
            await ProjectService.UpdateProjectAsync(project);
            project.IsEditing = false;
            _originalProjects.Remove(project.Id);
            Snackbar.Add("Project updated successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to update project: {ex.Message}", Severity.Error);
        }
    }

    private void CancelInlineEdit(ProjectDto project)
    {
        if (_originalProjects.ContainsKey(project.Id))
        {
            var original = _originalProjects[project.Id];
            project.Name = original.Name;
            project.Description = original.Description;
            //project.Status = original.Status;
            project.IsEditing = false;
            _originalProjects.Remove(project.Id);
        }
    }

    private async Task DeleteProject(Guid id)
    {
        var parameters = new DialogParameters { { "ContentText", "Are you sure you want to delete this project?" } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await ProjectService.DeleteProjectAsync(id);
                await _table.ReloadServerData();
                Snackbar.Add("Project deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete project: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task BulkDeleteProjects()
    {
        var parameters = new DialogParameters { { "ContentText", $"Are you sure you want to delete {_selectedProjects.Count} projects?" } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Bulk Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                foreach (var project in _selectedProjects)
                {
                    await ProjectService.DeleteProjectAsync(project.Id);
                }
                await _table.ReloadServerData();
                _selectedProjects.Clear();
                Snackbar.Add("Selected projects deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete projects: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task SearchProjects(string term)
    {
        _searchTerm = term;
        await _table.ReloadServerData();
    }

    private async Task RefreshProjects()
    {
        await _table.ReloadServerData();
        Snackbar.Add("Projects refreshed successfully", Severity.Success);
    }

    private void StartAutoRefresh()
    {
        if (_autoRefreshEnabled) return;
        _autoRefreshEnabled = true;
        Task.Run(async () =>
        {
            while (!_autoRefreshCts.Token.IsCancellationRequested)
            {
                await Task.Delay(TimeSpan.FromSeconds(30), _autoRefreshCts.Token);
                if (!_autoRefreshCts.Token.IsCancellationRequested)
                {
                    await InvokeAsync(async () => await _table.ReloadServerData());
                }
            }
        });
    }

    private async Task ExportToCsv()
    {
        try
        {
            // var projects = await ProjectService.GetProjectsAsync();
            // var csvContent = "Id,Name,Description,Status,TenantId\n" +
            //                  string.Join("\n", projects.Select(p => $"{p.Id},\"{p.Name.Replace("\"", "\"\"")}\",\"{p.Description?.Replace("\"", "\"\"")}\",{p.Status},{p.TenantId}"));
            // var bytes = System.Text.Encoding.UTF8.GetBytes(csvContent);
            // await JSRuntime.InvokeVoidAsync("saveAsFile", "projects.csv", Convert.ToBase64String(bytes));
            // Snackbar.Add("Projects exported to CSV successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to export projects: {ex.Message}", Severity.Error);
        }
    }

    private async Task ImportFromCsv()
    {
        var parameters = new DialogParameters { { "OnFileUploaded", new EventCallback<string>(this, ImportCsvContent) } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        await DialogService.ShowAsync<FileUploadDialog>("Import Projects from CSV", parameters, options);
    }

    private async Task ImportCsvContent(string csvContent)
    {
        try
        {
            var lines = csvContent.Split('\n').Skip(1).Where(line => !string.IsNullOrWhiteSpace(line));
            foreach (var line in lines)
            {
                var parts = line.Split(',').Select(p => p.Trim('"')).ToArray();
                if (parts.Length >= 3)
                {
                    var project = new CreateProjectDto
                    {
                        Name = parts[1],
                        Description = parts[2],
                        Status = parts.Length > 3 ? parts[3] : "Active"                        
                    };
                    await ProjectService.CreateProjectAsync(project);
                }
            }
            await _table.ReloadServerData();
            Snackbar.Add("Projects imported successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to import projects: {ex.Message}", Severity.Error);
        }
    }

    private string ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "Name is required";
        if (name.Length < 3)
            return "Name must be at least 3 characters long";
        return null;
    }

    private string ValidateUserIds(string userIds)
    {
        if (string.IsNullOrWhiteSpace(userIds)) return null;
        try
        {
            var ids = userIds.Split(',').Select(x => int.Parse(x.Trim())).ToList();
            if (ids.Any(id => id <= 0))
                return "User IDs must be positive numbers";
            return null;
        }
        catch
        {
            return "Invalid User ID format";
        }
    }
}